import pyttsx3

import speech_recognition as sr

import datetime

import wikipedia 

import webbrowser

import subprocess

import smtplib

import sys

engine = pyttsx3.init('sapi5')

voices = engine.getProperty('voices')

# print(voices[1].id)

engine.setProperty('voice', voices[-1].id)

def speak(audio):

    engine.say(audio)

    engine.runAndWait()

def wishMe():

    hour = int(datetime.datetime.now().hour)

    if hour>=0 and hour<12:

        print("Good morning!")

        speak("Good Morning!")

    elif hour>=12 and hour<18:

        print("Good Afternoon!")

        speak("Good Afternoon!")   

        

    else:

        print("Good Evening!")

        speak("Good Evening!")

        

    speak("I am your personal AI assistant, Hatch. I will operate tasks on your behalf. How may I help you?")

           

def takeCommand():

    #It takes microphone input from the user and returns string output

    r = sr.Recognizer()

    with sr.Microphone() as source:

        print("Listening...")

        r.pause_threshold = 1

        audio = r.listen(source)

    try:

        print("Recognizing...")    

        query = r.recognize_google(audio, language='en-in')

        print(f"User said: {query}\n")

    except Exception as e:

        # print(e)    

        print("Say that again please...")  

        return "None"

    return query

def sendEmail(to, content):

    server = smtplib.SMTP('smtp.gmail.com', 587)

    server.ehlo()

    server.starttls()

    server.login('email', 'password')

    server.sendmail('email', to, content)

    server.close()

if __name__ == "__main__":

    wishMe()

    while True:

    # if 1:

        query = takeCommand().lower()

        # Logic for executing tasks based on query

        if "good bye" in query or "ok bye" in query or "stop" in query:

            print("Your personal AI Hatch is shutting down! Bye")

            speak("Your personal AI Hatch is shutting down! Bye")

            sys.exit(0)

        elif 'search'  in query:

            query = query.replace("search", "")

            webbrowser.open_new_tab(query)

        elif 'wikipedia' in query:

            speak('Searching Wikipedia...')

            query = query.replace("wikipedia", "")

            results = wikipedia.summary(query, sentences=2)

            speak("According to Wikipedia")

            print(results)

            speak(results)

        elif 'open youtube' in query:

            webbrowser.open_new_tab("youtube.com")

            speak("youtube is open now")

        elif 'open google' in query:

            webbrowser.open_new_tab("google.com")

            speak("Google Chrome is open now")

        elif 'open instagram.com' in query:

            webbrowser.open_new_tab("instagram.com")

            speak("Instagram is open now")

        elif 'open stackoverflow' in query:

            webbrowser.open_new_tab("stackoverflow.com")

            speak("stackoverflow is open now")   

        elif 'time' in query:

            strTime = datetime.datetime.now().strftime("%H:%M:%S")    

            speak(f"Sir, the time is {strTime}")

        elif 'news' in query:

            webbrowser.open_new_tab("indiatimes.com")

            speak('Here are some headlines from the Times of India,Happy reading')

        

        elif 'shutdown' in query or 'log off' in query:

            speak("Ok , your pc will log off in 10 sec make sure you exit from all applications")

            subprocess.call(["shutdown", "/l"])
